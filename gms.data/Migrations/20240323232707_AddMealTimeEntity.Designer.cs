// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gms.data;

#nullable disable

namespace gms.data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240323232707_AddMealTimeEntity")]
    partial class AddMealTimeEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("gms.data.Models.Activity.ActivityCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("gms.ActivityCategory", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Activity.ActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityCategoryId");

                    b.ToTable("gms.Activity", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Activity.ActivityVideoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("gms.ActivityVideo", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Activity.MembershipActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("gms.MembershipActivity", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Enum.GenderEnumEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte>("BadgeColorId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("gms.GenderEnum", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BadgeColorId = (byte)1,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 798, DateTimeKind.Utc).AddTicks(4942),
                            GenderName = "Male",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            BadgeColorId = (byte)7,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 798, DateTimeKind.Utc).AddTicks(4961),
                            GenderName = "Female",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("gms.data.Models.Enum.GymResultMeasurementEnumEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("gms.GymResultMeasurement", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 798, DateTimeKind.Utc).AddTicks(9718),
                            IsDeleted = false,
                            Name = "Weight"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 798, DateTimeKind.Utc).AddTicks(9736),
                            IsDeleted = false,
                            Name = "Height"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 798, DateTimeKind.Utc).AddTicks(9740),
                            IsDeleted = false,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 798, DateTimeKind.Utc).AddTicks(9745),
                            IsDeleted = false,
                            Name = "Waist"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 798, DateTimeKind.Utc).AddTicks(9749),
                            IsDeleted = false,
                            Name = "Thing"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 798, DateTimeKind.Utc).AddTicks(9757),
                            IsDeleted = false,
                            Name = "Arms"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 798, DateTimeKind.Utc).AddTicks(9761),
                            IsDeleted = false,
                            Name = "Fat"
                        });
                });

            modelBuilder.Entity("gms.data.Models.Enum.MemberLevelEnumEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("gms.MemberLevelEnum", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 799, DateTimeKind.Utc).AddTicks(5065),
                            IsDeleted = false,
                            LevelName = "Beginner"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 799, DateTimeKind.Utc).AddTicks(5085),
                            IsDeleted = false,
                            LevelName = "Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 799, DateTimeKind.Utc).AddTicks(5090),
                            IsDeleted = false,
                            LevelName = "Advanced"
                        });
                });

            modelBuilder.Entity("gms.data.Models.Enum.PaymentMethodEnumEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("gms.PaymentMethodEnum", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 799, DateTimeKind.Utc).AddTicks(9511),
                            IsDeleted = false,
                            PaymentMethod = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 799, DateTimeKind.Utc).AddTicks(9532),
                            IsDeleted = false,
                            PaymentMethod = "Credit"
                        });
                });

            modelBuilder.Entity("gms.data.Models.Enum.StatusEnumEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte>("BadgeColorId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubscriptionStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("gms.StatusEnum", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BadgeColorId = (byte)2,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 800, DateTimeKind.Utc).AddTicks(4709),
                            IsDeleted = false,
                            SubscriptionStatus = "Active"
                        },
                        new
                        {
                            Id = 2,
                            BadgeColorId = (byte)3,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 800, DateTimeKind.Utc).AddTicks(4728),
                            IsDeleted = false,
                            SubscriptionStatus = "InActive"
                        },
                        new
                        {
                            Id = 3,
                            BadgeColorId = (byte)4,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 800, DateTimeKind.Utc).AddTicks(4733),
                            IsDeleted = false,
                            SubscriptionStatus = "Suspend"
                        },
                        new
                        {
                            Id = 4,
                            BadgeColorId = (byte)6,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 800, DateTimeKind.Utc).AddTicks(4737),
                            IsDeleted = false,
                            SubscriptionStatus = "Cancelled"
                        },
                        new
                        {
                            Id = 5,
                            BadgeColorId = (byte)3,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 800, DateTimeKind.Utc).AddTicks(4742),
                            IsDeleted = false,
                            SubscriptionStatus = "Expired"
                        },
                        new
                        {
                            Id = 6,
                            BadgeColorId = (byte)3,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 800, DateTimeKind.Utc).AddTicks(4750),
                            IsDeleted = false,
                            SubscriptionStatus = "NotPaid"
                        },
                        new
                        {
                            Id = 7,
                            BadgeColorId = (byte)4,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 800, DateTimeKind.Utc).AddTicks(4754),
                            IsDeleted = false,
                            SubscriptionStatus = "PartiallyPaid"
                        },
                        new
                        {
                            Id = 8,
                            BadgeColorId = (byte)2,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 800, DateTimeKind.Utc).AddTicks(4759),
                            IsDeleted = false,
                            SubscriptionStatus = "FullyPaid"
                        });
                });

            modelBuilder.Entity("gms.data.Models.Enum.SubscriptionTypeEnumEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("gms.SubscriptionTypeEnum", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 800, DateTimeKind.Utc).AddTicks(9403),
                            IsDeleted = false,
                            SubscriptionType = "Monthly"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 800, DateTimeKind.Utc).AddTicks(9422),
                            IsDeleted = false,
                            SubscriptionType = "Annually"
                        });
                });

            modelBuilder.Entity("gms.data.Models.Gym.GymBranchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeneralSettingId")
                        .HasColumnType("int");

                    b.Property<int>("GymId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainBranch")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GeneralSettingId")
                        .IsUnique()
                        .HasFilter("[GeneralSettingId] IS NOT NULL");

                    b.HasIndex("GymId");

                    b.ToTable("gms.GymBranch", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Gym.GymEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeneralSettingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GeneralSettingId")
                        .IsUnique();

                    b.ToTable("gms.Gym", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Gym.GymGeneralSettingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Arms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Chest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GymId")
                        .HasColumnType("int");

                    b.Property<byte[]>("GymLogo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReminderDays")
                        .HasColumnType("int");

                    b.Property<string>("ReminderMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ReportFooter")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ReportHeader")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Thing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Waist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("gms.GymGeneralSetting", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Gym.GymMeasurementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Result")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("ResultMeasurementId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("gms.GymMeasurement", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Gym.GymNotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationMessageBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("gms.GymNotification", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Gym.MeasurementImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.ToTable("gms.MeasurementImage", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Nutrition.MealTimeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("gms.MealTime", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Nutrition.NutritionPlanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("gms.NutritionPlan", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Nutrition.NutritionPlanMealEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MealTimeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NutritionPlanId")
                        .HasColumnType("int");

                    b.Property<byte>("WeekDayId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("MealTimeId");

                    b.HasIndex("NutritionPlanId");

                    b.ToTable("gms.NutritionPlanMeal", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Shared.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Flag")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("gms.Country", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Subscription.PlanEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxBranchNumber")
                        .HasColumnType("int");

                    b.Property<int>("MaxMemberNumberPerBranch")
                        .HasColumnType("int");

                    b.Property<int>("MaxStaffNumberPerBranch")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerMonth")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerYear")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReminderDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("gms.SystemPlan", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 818, DateTimeKind.Utc).AddTicks(2900),
                            IsDeleted = false,
                            MaxBranchNumber = 1,
                            MaxMemberNumberPerBranch = 50,
                            MaxStaffNumberPerBranch = 20,
                            PlanName = "free_trial",
                            PricePerMonth = 0m,
                            PricePerYear = 0m,
                            ReminderDays = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 818, DateTimeKind.Utc).AddTicks(2911),
                            IsDeleted = false,
                            MaxBranchNumber = 3,
                            MaxMemberNumberPerBranch = 100,
                            MaxStaffNumberPerBranch = 30,
                            PlanName = "startup",
                            PricePerMonth = 500m,
                            PricePerYear = 5000m,
                            ReminderDays = 10
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 818, DateTimeKind.Utc).AddTicks(2915),
                            IsDeleted = false,
                            MaxBranchNumber = 5,
                            MaxMemberNumberPerBranch = 200,
                            MaxStaffNumberPerBranch = 40,
                            PlanName = "business",
                            PricePerMonth = 1000m,
                            PricePerYear = 10000m,
                            ReminderDays = 10
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 23, 23, 27, 5, 818, DateTimeKind.Utc).AddTicks(2918),
                            IsDeleted = false,
                            MaxBranchNumber = 10,
                            MaxMemberNumberPerBranch = 400,
                            MaxStaffNumberPerBranch = 50,
                            PlanName = "enterprise",
                            PricePerMonth = 2000m,
                            PricePerYear = 20000m,
                            ReminderDays = 10
                        });
                });

            modelBuilder.Entity("gms.data.Models.Subscription.SubscriptionPaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("PaymentMethodId")
                        .HasColumnType("tinyint");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("gms.SubscriptionPayment", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Subscription.SystemSubscriptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("PlanId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SubscriptionAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SubscriptionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubscriptionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("SubscriptionStatusId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SubscriptionTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("gms.SystemSubscription", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Workout.WorkoutPlanActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Kg")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("RestTime")
                        .HasColumnType("time");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<byte>("WeekDayId")
                        .HasColumnType("tinyint");

                    b.Property<int>("WorkoutPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("WorkoutPlanId");

                    b.ToTable("gms.WorkoutPlanActivity", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Workout.WorkoutPlanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("MemberLevelId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("gms.WorkoutPlan", (string)null);
                });

            modelBuilder.Entity("gms.data.Models.Activity.ActivityEntity", b =>
                {
                    b.HasOne("gms.data.Models.Activity.ActivityCategoryEntity", "ActivityCategory")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityCategory");
                });

            modelBuilder.Entity("gms.data.Models.Activity.ActivityVideoEntity", b =>
                {
                    b.HasOne("gms.data.Models.Activity.ActivityEntity", "Activity")
                        .WithMany("ActivityVideos")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("gms.data.Models.Activity.MembershipActivityEntity", b =>
                {
                    b.HasOne("gms.data.Models.Activity.ActivityEntity", "Activity")
                        .WithMany("MembershipActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("gms.data.Models.Gym.GymBranchEntity", b =>
                {
                    b.HasOne("gms.data.Models.Shared.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gms.data.Models.Gym.GymGeneralSettingEntity", "GeneralSetting")
                        .WithOne("GymBranch")
                        .HasForeignKey("gms.data.Models.Gym.GymBranchEntity", "GeneralSettingId");

                    b.HasOne("gms.data.Models.Gym.GymEntity", "Gym")
                        .WithMany("GymBranches")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("GeneralSetting");

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("gms.data.Models.Gym.GymEntity", b =>
                {
                    b.HasOne("gms.data.Models.Gym.GymGeneralSettingEntity", "GeneralSetting")
                        .WithOne("Gym")
                        .HasForeignKey("gms.data.Models.Gym.GymEntity", "GeneralSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralSetting");
                });

            modelBuilder.Entity("gms.data.Models.Gym.MeasurementImageEntity", b =>
                {
                    b.HasOne("gms.data.Models.Gym.GymMeasurementEntity", "GymMeasurement")
                        .WithMany("MeasurementImages")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GymMeasurement");
                });

            modelBuilder.Entity("gms.data.Models.Nutrition.NutritionPlanMealEntity", b =>
                {
                    b.HasOne("gms.data.Models.Nutrition.MealTimeEntity", "MealTime")
                        .WithMany("NutritionPlanMeals")
                        .HasForeignKey("MealTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gms.data.Models.Nutrition.NutritionPlanEntity", "NutritionPlan")
                        .WithMany("NutritionPlanMeals")
                        .HasForeignKey("NutritionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealTime");

                    b.Navigation("NutritionPlan");
                });

            modelBuilder.Entity("gms.data.Models.Subscription.SubscriptionPaymentEntity", b =>
                {
                    b.HasOne("gms.data.Models.Subscription.SystemSubscriptionEntity", "Subscription")
                        .WithOne()
                        .HasForeignKey("gms.data.Models.Subscription.SubscriptionPaymentEntity", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("gms.data.Models.Workout.WorkoutPlanActivityEntity", b =>
                {
                    b.HasOne("gms.data.Models.Activity.ActivityEntity", "Activity")
                        .WithMany("WorkoutPlanActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gms.data.Models.Workout.WorkoutPlanEntity", "WorkoutPlan")
                        .WithMany("WorkoutPlanActivities")
                        .HasForeignKey("WorkoutPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("WorkoutPlan");
                });

            modelBuilder.Entity("gms.data.Models.Activity.ActivityCategoryEntity", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("gms.data.Models.Activity.ActivityEntity", b =>
                {
                    b.Navigation("ActivityVideos");

                    b.Navigation("MembershipActivities");

                    b.Navigation("WorkoutPlanActivities");
                });

            modelBuilder.Entity("gms.data.Models.Gym.GymEntity", b =>
                {
                    b.Navigation("GymBranches");
                });

            modelBuilder.Entity("gms.data.Models.Gym.GymGeneralSettingEntity", b =>
                {
                    b.Navigation("Gym")
                        .IsRequired();

                    b.Navigation("GymBranch")
                        .IsRequired();
                });

            modelBuilder.Entity("gms.data.Models.Gym.GymMeasurementEntity", b =>
                {
                    b.Navigation("MeasurementImages");
                });

            modelBuilder.Entity("gms.data.Models.Nutrition.MealTimeEntity", b =>
                {
                    b.Navigation("NutritionPlanMeals");
                });

            modelBuilder.Entity("gms.data.Models.Nutrition.NutritionPlanEntity", b =>
                {
                    b.Navigation("NutritionPlanMeals");
                });

            modelBuilder.Entity("gms.data.Models.Workout.WorkoutPlanEntity", b =>
                {
                    b.Navigation("WorkoutPlanActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
